#BlueJ class context
comment0.target=World
comment0.text=\r\n\ The\ `World`\ class\ represents\ the\ environment\ in\ which\ robots\ operate.\r\n\ It\ defines\ the\ minimum\ and\ maximum\ positions\ within\ the\ world\ and\ maintains\ a\ list\ of\ robots.\r\n
comment1.params=
comment1.target=World()
comment1.text=\r\n\ Creates\ a\ new\ World\ instance.\r\n
comment10.params=
comment10.target=java.util.ArrayList\ getRobotList()
comment10.text=\r\n\ Gets\ the\ list\ of\ robots\ currently\ present\ in\ the\ world.\r\n\r\n\ @return\ An\ ArrayList\ containing\ the\ robots\ in\ the\ world.\r\n
comment11.params=xrobot\ yrobot
comment11.target=boolean\ collision(int,\ int)
comment11.text=\r\n\ Checks\ if\ there\ is\ a\ collision\ between\ a\ robot\ at\ the\ specified\ position\ and\ other\ robots\ in\ the\ world.\r\n\r\n\ @param\ xrobot\ The\ X-coordinate\ position\ of\ the\ robot\ to\ check\ for\ collision.\r\n\ @param\ yrobot\ The\ Y-coordinate\ position\ of\ the\ robot\ to\ check\ for\ collision.\r\n\ @return\ true\ if\ a\ collision\ is\ detected,\ false\ otherwise.\r\n
comment12.params=xR\ yR
comment12.target=boolean\ outOfCanvas(int,\ int)
comment12.text=\r\n\ Checks\ if\ a\ robot\ is\ positioned\ outside\ the\ canvas\ boundaries.\r\n\r\n\ @param\ xR\ The\ X-coordinate\ position\ of\ the\ robot\ to\ check.\r\n\ @param\ yR\ The\ Y-coordinate\ position\ of\ the\ robot\ to\ check.\r\n\ @return\ true\ if\ the\ robot\ is\ outside\ the\ canvas\ boundaries,\ false\ otherwise.\r\n
comment13.params=xR\ yR
comment13.target=boolean\ movePossible(int,\ int)
comment13.text=\r\n\ Checks\ if\ a\ move\ to\ the\ specified\ position\ is\ possible\ for\ a\ robot,\ considering\ collisions\ and\ canvas\ boundaries.\r\n\r\n\ @param\ xR\ The\ X-coordinate\ position\ to\ check\ for\ the\ move.\r\n\ @param\ yR\ The\ Y-coordinate\ position\ to\ check\ for\ the\ move.\r\n\ @return\ true\ if\ the\ move\ is\ possible,\ false\ if\ it's\ not\ due\ to\ collisions\ or\ being\ outside\ canvas\ boundaries.\r\n
comment14.params=
comment14.target=void\ playLetsGoSound()
comment14.text=\r\n\ Plays\ the\ "Let's\ Go"\ sound\ effect.\r\n
comment15.params=event
comment15.target=void\ update(javax.sound.sampled.LineEvent)
comment16.params=
comment16.target=void\ playEndSound()
comment16.text=\r\n\ Plays\ some\ sound\ effect\ at\ the\ end\ of\ the\ moves\ of\ all\ the\ robots.\r\n
comment17.params=event
comment17.target=void\ update(javax.sound.sampled.LineEvent)
comment18.params=
comment18.target=void\ playSuspenseSound()
comment18.text=\r\n\ Plays\ some\ suspensful\ sound\ effect.\r\n
comment19.params=event
comment19.target=void\ update(javax.sound.sampled.LineEvent)
comment2.params=nbRobots\ nbIteration
comment2.target=void\ testWorld(int,\ int)
comment2.text=\r\n\ Executes\ a\ test\ scenario\ in\ the\ world\ with\ a\ specified\ number\ of\ robots\ and\ iterations.\r\n\ This\ method\ creates\ the\ specified\ number\ of\ robots\ and\ then\ moves\ them\ for\ the\ specified\ number\ of\ iterations\ using\ the\ `moveAll`\ method.\r\n\r\n\ @param\ nbRobots\ The\ number\ of\ robots\ to\ create\ and\ test\ in\ the\ world.\r\n\ @param\ nbIteration\ The\ number\ of\ iterations\ to\ move\ the\ robots.\r\n
comment3.params=nbIteration
comment3.target=void\ moveAll(int)
comment3.text=\r\n\ Initiates\ a\ series\ of\ actions\ to\ move\ robots\ within\ the\ world\ for\ a\ specified\ number\ of\ iterations.\r\n\ This\ method\ plays\ suspenseful\ sounds,\ delays\ for\ a\ certain\ duration,\ plays\ a\ "Let's\ Go"\ sound,\ and\ then\r\n\ moves\ each\ robot\ for\ the\ specified\ number\ of\ iterations,\ followed\ by\ playing\ an\ end\ sound.\r\n\r\n\ @param\ nbIteration\ The\ number\ of\ iterations\ to\ move\ the\ robots.\r\n
comment4.params=nbRobots
comment4.target=void\ createLife(int)
comment4.text=\r\n\ Creates\ a\ specified\ number\ of\ robots\ with\ random\ positions\ and\ colors.\r\n\ This\ method\ generates\ and\ initializes\ the\ specified\ number\ of\ robots\ with\ random\ X\ and\ Y\ positions\r\n\ that\ are\ within\ the\ world\ boundaries\ and\ assigns\ each\ robot\ a\ random\ color.\r\n\r\n\ @param\ nbRobots\ The\ number\ of\ robots\ to\ create.\r\n
comment5.params=
comment5.target=int\ getMaxPosition()
comment5.text=\r\n\ Gets\ the\ maximum\ position\ allowed\ within\ the\ world.\r\n\r\n\ @return\ The\ maximum\ position\ value\ for\ the\ world.\r\n
comment6.params=
comment6.target=int\ getMinPosition()
comment6.text=\r\n\ Gets\ the\ minimum\ position\ allowed\ within\ the\ world.\r\n\r\n\ @return\ The\ minimum\ position\ value\ for\ the\ world.\r\n
comment7.params=
comment7.target=int\ randomPosition()
comment7.text=\r\n\ Generates\ a\ random\ position\ within\ the\ allowed\ range\ in\ the\ world.\r\n\r\n\ @return\ A\ randomly\ generated\ position\ value\ within\ the\ world's\ valid\ range.\r\n
comment8.params=
comment8.target=int\ getMaxRobot()
comment8.text=\r\n\ Gets\ the\ maximum\ number\ of\ robots\ allowed\ in\ the\ world.\r\n\r\n\ @return\ The\ maximum\ number\ of\ robots\ that\ can\ exist\ in\ the\ world.\r\n
comment9.params=
comment9.target=int\ getNbRobot()
comment9.text=\r\n\ Gets\ the\ current\ number\ of\ robots\ in\ the\ world.\r\n\r\n\ @return\ The\ number\ of\ robots\ currently\ present\ in\ the\ world.\r\n
numComments=20
